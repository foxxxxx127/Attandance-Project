这一次其实你发现，你不用再去安装用命令行再去安装elementplus以及saas这一个项目它就自动把这一些依赖全部下载下来了
所以这说明你以后可以直接去找别人的配置文件来研究

既然你之前都已经写好了一样的模板，就像那一个主登陆界面已经写好了，你就自己读懂里面的东西
然后想办法把它用到这一个自己的登陆界面里面去


先定义响应式数据registerdata
调用request.post('/person/register',params)
for(let key in registerData[key]){
    params.append(key,registerData[key])
}


<template>
  <div class="publish-checkin-container">
    <el-card shadow="hover" class="form-card">
      <template #header>
        <div class="card-header">
          <span>发布新打卡</span>
        </div>
      </template>

      <el-form :model="form" label-width="120px" label-position="left">
        <!-- 打卡方式选择 -->
        <el-form-item label="打卡方式">
          <el-radio-group v-model="form.checkinType">
            <el-radio label="mixed">混合模式</el-radio>
            <el-radio label="face">人脸识别</el-radio>
            <el-radio label="location">地理位置</el-radio>
          </el-radio-group>
        </el-form-item>

        <!-- 地理位置设置 -->
        <div v-if="form.checkinType === 'location'">
          <el-form-item label="选择地点">
            <el-button type="primary" @click="openMapDialog">选择地理位置</el-button>
            <el-button @click="getCurrentLocation" :loading="locating">
              <el-icon><Location /></el-icon>
              使用当前位置
            </el-button>
            <div v-if="form.location" class="location-info">
              <p>经度: {{ form.location.longitude }}</p>
              <p>纬度: {{ form.location.latitude }}</p>
              <p v-if="form.location.address">地址: {{ form.location.address }}</p>
            </div>
          </el-form-item>

          <el-form-item label="打卡范围(米)">
            <el-input-number 
              v-model="form.radius" 
              :min="50" 
              :max="1000" 
              :step="50"
            />
          </el-form-item>
        </div>

        <!-- 打卡时间设置 -->
        <el-form-item label="打卡时间">
          <el-date-picker
            v-model="form.timeRange"
            type="datetimerange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>

        <el-form-item>
          <el-button type="primary" @click="submitForm">发布打卡</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 地图选择对话框 -->
    <el-dialog
      v-model="mapDialogVisible"
      title="选择打卡位置"
      width="70%"
      @closed="cleanMap"
    >
      <div class="map-dialog-content">
        <div id="baidu-map-container" class="map-container"></div>
        <div class="map-controls">
          <el-button @click="locateCurrentPosition" :loading="locating">
            <el-icon><Location /></el-icon>
            定位当前位置
          </el-button>
          <div class="selected-info" v-if="selectedLocation">
            <p>经度: {{ selectedLocation.longitude }}</p>
            <p>纬度: {{ selectedLocation.latitude }}</p>
            <p v-if="selectedLocation.address">地址: {{ selectedLocation.address }}</p>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="mapDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="confirmLocation" 
          :disabled="!selectedLocation"
        >
          确定
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, nextTick } from 'vue'
import { ElMessage } from 'element-plus'
import { Location } from '@element-plus/icons-vue'
import request from '@/utils/request'
// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 声明百度地图类型
/**
 * @typedef {Object} BMap
 * @property {function} Map - 地图构造函数
 * @property {function} Point - 点坐标构造函数
 * @property {function} Marker - 标记点构造函数
 * @property {function} NavigationControl - 导航控件
 * @property {function} ScaleControl - 比例尺控件
 * @property {function} Geocoder - 地理编码器
 */
let BMap = window.BMap

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
let map = null
let marker = null
let geocoder = null

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (window.BMap) {
      BMap = window.BMap
      resolve()
      return
    }

    const script = document.createElement('script')
    script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
    script.onerror = reject
    
    window.initBaiduMap = () => {
      BMap = window.BMap
      resolve()
    }
    document.head.appendChild(script)
  })
}

// 初始化地图
const initMap = () => {
  map = new BMap.Map('baidu-map-container')
  map.enableScrollWheelZoom()
  map.enableDragging()
  
  // 添加地图控件
  map.addControl(new BMap.NavigationControl())
  map.addControl(new BMap.ScaleControl())
  
  // 初始化地理编码器
  geocoder = new BMap.Geocoder()
  
  // 添加点击事件
  map.addEventListener('click', async (e) => {
    const point = e.point
    await updateSelectedLocation(point.lng, point.lat)
  })
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    map.clearOverlays()
    map = null
  }
  selectedLocation.value = null
}

// 更新选中的位置信息
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧标记
    if (marker) {
      map.removeOverlay(marker)
    }
    
    // 添加新标记
    marker = new BMap.Marker(point)
    map.addOverlay(marker)
    map.panTo(point)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        if (result) {
          const addComp = result.addressComponents
          resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
        } else {
          resolve(null)
        }
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
  } catch (error) {
    console.error('更新位置失败:', error)
    ElMessage.error('获取位置信息失败')
  }
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    locating.value = true
    await loadBaiduMap()
    mapDialogVisible.value = true
    
    // 延迟初始化地图以确保DOM已渲染
    await nextTick()
    initMap()
    
    // 如果有已选位置，居中显示
    if (form.value.location) {
      const point = new BMap.Point(
        form.value.location.longitude,
        form.value.location.latitude
      )
      map.panTo(point)
      await updateSelectedLocation(
        form.value.location.longitude,
        form.value.location.latitude
      )
    }
  } catch (error) {
    console.error('地图加载失败:', error)
    ElMessage.error('地图加载失败，请稍后重试')
  } finally {
    locating.value = false
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 5000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        // 获取地址信息
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 5000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  // 实际项目中应该调用百度地图的坐标转换API
  // 这里简单模拟转换过程
  return new Promise((resolve) => {
    // 模拟API调用延迟
    setTimeout(() => {
      // 实际转换算法更复杂，这里简化处理
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) {
      geocoder = new BMap.Geocoder()
    }
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
  }
}

// 提交表单
const submitForm = () => {
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  // 构建发送到服务器的数据对象
  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  console.log('提交的打卡数据:', payload)

  // 实际使用时替换为API调用
  // axios.post('/api/checkin-settings', payload)
  //   .then(() => ElMessage.success('打卡设置发布成功'))
  //   .catch(err => ElMessage.error(`发布失败: ${err.message}`))
  request({
    method:'post',
    url:'/releasecheckin',
    payload
  }).then((response)=>{
    if(response.code===0){
      ElMessage.success('打卡发布成功')
    }
  }).catch((error)=>{
    console.log(error)
  })
  
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
}
</script>

<style scoped>
.publish-checkin-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
}

.form-card {
  border-radius: 8px;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

.map-dialog-content {
  display: flex;
  height: 500px;
}

.map-container {
  flex: 1;
  height: 100%;
  min-height: 300px;
}

.map-controls {
  width: 250px;
  padding-left: 20px;
  display: flex;
  flex-direction: column;
}

.location-info, .selected-info {
  margin-top: 10px;
  padding: 10px;
  background-color: #f5f7fa;
  border-radius: 4px;
  font-size: 14px;
}

.location-info p, .selected-info p {
  margin: 5px 0;
}
</style> --------------------------------version1


<template>
  <div class="publish-checkin-container">
    <el-card shadow="hover" class="form-card">
      <template #header>
        <div class="card-header">
          <span>发布新打卡</span>
        </div>
      </template>

      <el-form :model="form" label-width="120px" label-position="left">
        <!-- 打卡方式选择 -->
        <el-form-item label="打卡方式">
          <el-radio-group v-model="form.checkinType">
            <el-radio label="mixed">混合模式</el-radio>
            <el-radio label="face">人脸识别</el-radio>
            <el-radio label="location">地理位置</el-radio>
          </el-radio-group>
        </el-form-item>

        <!-- 地理位置设置 -->
        <div v-if="form.checkinType === 'location'">
          <el-form-item label="选择地点">
            <el-button type="primary" @click="openMapDialog">选择地理位置</el-button>
            <el-button @click="getCurrentLocation" :loading="locating">
              <el-icon><Location /></el-icon>
              使用当前位置
            </el-button>
            <div v-if="form.location" class="location-info">
              <p>经度: {{ form.location.longitude.toFixed(6) }}</p>
              <p>纬度: {{ form.location.latitude.toFixed(6) }}</p>
              <p v-if="form.location.address">地址: {{ form.location.address }}</p>
            </div>
          </el-form-item>

          <el-form-item label="打卡范围(米)">
            <el-input-number 
              v-model="form.radius" 
              :min="50" 
              :max="1000" 
              :step="50"
            />
          </el-form-item>
        </div>

        <!-- 打卡时间设置 -->
        <el-form-item label="打卡时间">
          <el-date-picker
            v-model="form.timeRange"
            type="datetimerange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>

        <el-form-item>
          <el-button type="primary" @click="submitForm">发布打卡</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 优化后的地图选择对话框 -->
    <el-dialog
      v-model="mapDialogVisible"
      title="选择打卡位置"
      width="80%"
      @closed="cleanMap"
    >
      <div class="map-dialog-content">
        <div id="baidu-map-container" class="map-container">
          <div v-if="mapLoading" class="map-loading">
            <el-icon class="is-loading"><Loading /></el-icon>
            <span>地图加载中...</span>
          </div>
        </div>
        <div class="map-controls">
          <div class="control-buttons">
            <el-button @click="locateCurrentPosition" :loading="locating" type="primary" plain>
              <el-icon><Location /></el-icon>
              定位当前位置
            </el-button>
            <el-button @click="centerToSelected" :disabled="!selectedLocation" plain>
              <el-icon><Aim /></el-icon>
              居中显示
            </el-button>
          </div>
          <div class="selected-info" v-if="selectedLocation">
            <h4>已选位置信息</h4>
            <el-divider />
            <div class="info-item">
              <span class="label">经度:</span>
              <span class="value">{{ selectedLocation.longitude.toFixed(6) }}</span>
            </div>
            <div class="info-item">
              <span class="label">纬度:</span>
              <span class="value">{{ selectedLocation.latitude.toFixed(6) }}</span>
            </div>
            <div class="info-item" v-if="selectedLocation.address">
              <span class="label">地址:</span>
              <span class="value">{{ selectedLocation.address }}</span>
            </div>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="mapDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="confirmLocation" 
          :disabled="!selectedLocation"
        >
          确定
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
/* eslint-disable */
/* global BMap, BMAP_ANCHOR_TOP_LEFT, BMAP_NAVIGATION_CONTROL_SMALL, BMAP_ANCHOR_BOTTOM_LEFT */

import { ref, nextTick, onBeforeUnmount } from 'vue'
import { ElMessage } from 'element-plus'
import { Location, Aim, Loading } from '@element-plus/icons-vue'
import request from '@/utils/request'

// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
const mapLoading = ref(true)
let map = null
let marker = null
let circle = null
let geocoder = null

// 组件卸载前清理地图
onBeforeUnmount(() => {
  cleanMap()
})

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (window.BMap) {
      resolve()
      return
    }

    const script = document.createElement('script')
    script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
    script.onerror = () => {
      reject(new Error('百度地图加载失败'))
      document.head.removeChild(script)
    }
    
    window.initBaiduMap = () => {
      resolve()
    }
    document.head.appendChild(script)
  })
}

// 初始化地图
const initMap = () => {
  try {
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 清空容器并添加加载提示
    mapContainer.innerHTML = ''
    
    // 确保BMap对象已存在
    if (!window.BMap) {
      throw new Error('百度地图API未正确加载')
    }
    
    // 创建地图实例
    map = new BMap.Map('baidu-map-container', {
      enableMapClick: false,
      minZoom: 10,
      maxZoom: 19
    })
    
    // 设置默认中心点-北京
    const defaultPoint = new BMap.Point(116.404, 39.915)
    map.centerAndZoom(defaultPoint, 15)
    
    // 启用地图控件
    map.enableScrollWheelZoom(true)
    map.enableDragging()
    map.enableDoubleClickZoom()
    
    // 添加导航控件
    map.addControl(new BMap.NavigationControl({
      anchor: BMAP_ANCHOR_TOP_LEFT,
      type: BMAP_NAVIGATION_CONTROL_SMALL
    }))
    
    // 添加比例尺控件
    map.addControl(new BMap.ScaleControl({
      anchor: BMAP_ANCHOR_BOTTOM_LEFT
    }))
    
    // 设置地图样式
    map.setMapStyle({
      styleJson: [
        {
          "featureType": "all",
          "elementType": "all",
          "stylers": {
            "lightness": 10,
            "saturation": -100
          }
        }
      ]
    })
    
    // 初始化地理编码器
    geocoder = new BMap.Geocoder()
    
    // 添加点击事件
    map.addEventListener('click', async (e) => {
      const point = e.point
      await updateSelectedLocation(point.lng, point.lat)
    })

    mapLoading.value = false
  } catch (error) {
    console.error('地图初始化失败:', error)
    ElMessage.error('地图初始化失败，请刷新页面重试')
    mapDialogVisible.value = false
  }
}

// 更新选中的位置信息
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧标记
    if (marker) map.removeOverlay(marker)
    if (circle) map.removeOverlay(circle)
    
    // 添加新标记（可拖拽）
    marker = new BMap.Marker(point, {
      enableDragging: true
    })
    
    // 添加标记拖拽事件
    marker.addEventListener('dragend', (e) => {
      updateSelectedLocation(e.point.lng, e.point.lat)
    })
    
    map.addOverlay(marker)
    map.panTo(point)
    
    // 添加圆形覆盖物表示范围
    circle = new BMap.Circle(point, form.value.radius, {
      strokeColor: "#1890ff",
      strokeWeight: 2,
      strokeOpacity: 0.8,
      fillColor: "#1890ff",
      fillOpacity: 0.2
    })
    map.addOverlay(circle)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        if (result) {
          const addComp = result.addressComponents
          resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
        } else {
          resolve(null)
        }
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
  } catch (error) {
    console.error('更新位置失败:', error)
    ElMessage.error('获取位置信息失败')
  }
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    map.clearOverlays()
    map = null
  }
  marker = null
  circle = null
  selectedLocation.value = null
  mapLoading.value = true
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    locating.value = true
    mapDialogVisible.value = true
    
    // 确保DOM已更新
    await nextTick()
    
    // 加载百度地图API
    await loadBaiduMap()
    
    // 初始化地图
    initMap()
    
    // 如果有已选位置，居中显示
    if (form.value.location) {
      setTimeout(() => {
        const point = new BMap.Point(
          form.value.location.longitude,
          form.value.location.latitude
        )
        map.panTo(point)
        updateSelectedLocation(
          form.value.location.longitude,
          form.value.location.latitude
        )
      }, 300)
    }
  } catch (error) {
    console.error('打开地图失败:', error)
    ElMessage.error(error.message || '地图加载失败')
    mapDialogVisible.value = false
  } finally {
    locating.value = false
  }
}

// 居中显示已选位置
const centerToSelected = () => {
  if (selectedLocation.value && map) {
    const point = new BMap.Point(
      selectedLocation.value.longitude,
      selectedLocation.value.latitude
    )
    map.panTo(point)
    map.setZoom(17)
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        // 获取地址信息
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  // 实际项目中应该调用百度地图的坐标转换API
  return new Promise((resolve) => {
    setTimeout(() => {
      // 简化的坐标转换算法
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) geocoder = new BMap.Geocoder()
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
  }
}

// 提交表单
const submitForm = () => {
  // 验证时间范围
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  // 验证位置信息
  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  // 构建请求数据
  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  // 发送请求
  request({
    method: 'post',
    url: '/releasecheckin',
    data: payload
  }).then((response) => {
    if (response.code === 0) {
      ElMessage.success('打卡发布成功')
      resetForm()
    } else {
      ElMessage.error(response.message || '打卡发布失败')
    }
  }).catch((error) => {
    console.error(error)
    ElMessage.error('打卡发布失败')
  })
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
}
</script>

<style scoped>
.publish-checkin-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
}

.form-card {
  border-radius: 8px;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

.location-info {
  margin-top: 10px;
  padding: 10px;
  background-color: #f5f7fa;
  border-radius: 4px;
  font-size: 14px;
}

.location-info p {
  margin: 5px 0;
}

.map-dialog-content {
  display: flex;
  height: 60vh;
  gap: 16px;
}

.map-container {
  flex: 1;
  height: 100%;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  position: relative;
  background-color: #f5f7fa;
}

.map-loading {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8);
  z-index: 10;
  color: #606266;
}

.map-loading .el-icon {
  font-size: 24px;
  margin-bottom: 8px;
  animation: rotating 2s linear infinite;
}

@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.map-controls {
  width: 280px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.control-buttons {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.selected-info {
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
}

.selected-info h4 {
  margin: 0 0 8px 0;
  color: #303133;
}

.info-item {
  display: flex;
  margin: 8px 0;
  line-height: 1.5;
}

.info-item .label {
  color: #606266;
  min-width: 40px;
  margin-right: 8px;
}

.info-item .value {
  color: #303133;
  word-break: break-all;
}
</style>  -------version2






我是引入了这一个这个是我对网络请求库进行的一个封装，你就使用这一个帮我把所有网络请求进行实现把，比如，像这里面地发送登录请求或者注册请求，
你的网络请求的url你就直接/login或者/register就好了，因为我的基础url我已经封装好了，像以后其他组件中要用到的url你自己进行一个设置就好了，
你相当于把这一个组件的功能进行一个完整的实现就好了，比如有时候用到get请求你就把获得到的数据进行比如说是界面的渲染这一些东西你就做好就好了，
我就相当于给你一个vue组件你把里面的所有功能进行完整的实现，那些请求url你自拟，到时候我后端在进行一个完整的实现就好了



Uncaught runtime errors:
×
ERROR
Cannot read properties of null (reading 'insertBefore')
TypeError: Cannot read properties of null (reading 'insertBefore')
    at insert (webpack-internal:///./node_modules/.store/@vue+runtime-dom@3.5.13/node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js:240:12)
    at processCommentNode (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4510:7)
    at patch (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4469:9)
    at patchBlockChildren (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4738:7)
    at processFragment (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4795:9)
    at patch (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4479:9)
    at patchKeyedChildren (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:5127:9)
    at patchChildren (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:5087:11)
    at processFragment (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4800:9)
    at patch (webpack-internal:///./node_modules/.store/@vue+runtime-core@3.5.13/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js:4479:9)现在又报了这一个错误请问我该怎么解决，代码如下，你帮我全部进行修改最后给一个完整的代码给我：<template>
  <div class="publish-checkin-container">
    <el-card shadow="hover" class="form-card">
      <template #header>
        <div class="card-header">
          <span>发布新打卡</span>
        </div>
      </template>

      <el-form :model="form" label-width="120px" label-position="left">
        <!-- 打卡方式选择 -->
        <el-form-item label="打卡方式">
          <el-radio-group v-model="form.checkinType">
            <el-radio label="mixed">混合模式</el-radio>
            <el-radio label="face">人脸识别</el-radio>
            <el-radio label="location">地理位置</el-radio>
          </el-radio-group>
        </el-form-item>

        <!-- 地理位置设置 -->
        <div v-if="form.checkinType === 'location'">
          <el-form-item label="选择地点">
            <el-button type="primary" @click="openMapDialog">选择地理位置</el-button>
            <el-button @click="getCurrentLocation" :loading="locating">
              <el-icon><Location /></el-icon>
              使用当前位置
            </el-button>
            <div v-if="form.location" class="location-info">
              <p>经度: {{ form.location.longitude.toFixed(6) }}</p>
              <p>纬度: {{ form.location.latitude.toFixed(6) }}</p>
              <p v-if="form.location.address">地址: {{ form.location.address }}</p>
            </div>
          </el-form-item>

          <el-form-item label="打卡范围(米)">
            <el-input-number 
              v-model="form.radius" 
              :min="50" 
              :max="1000" 
              :step="50"
            />
          </el-form-item>
        </div>

        <!-- 打卡时间设置 -->
        <el-form-item label="打卡时间">
          <el-date-picker
            v-model="form.timeRange"
            type="datetimerange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>

        <el-form-item>
          <el-button type="primary" @click="submitForm">发布打卡</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 地图选择对话框 -->
    <el-dialog
      v-model="mapDialogVisible"
      title="选择打卡位置"
      width="80%"
      @closed="cleanMap"
    >
      <div class="map-dialog-content">
        <div id="baidu-map-container" class="map-container">
          <div v-if="mapLoading" class="map-loading">
            <el-icon class="is-loading"><Loading /></el-icon>
            <span>地图加载中...</span>
          </div>
        </div>
        <div class="map-controls">
          <div class="search-box">
            <el-input
              v-model="searchQuery"
              placeholder="搜索地点"
              clearable
              @keyup.enter="handleSearch"
            >
              <template #append>
                <el-button @click="handleSearch">
                  <el-icon><Search /></el-icon>
                </el-button>
              </template>
            </el-input>
          </div>
          <div class="control-buttons">
            <el-button @click="locateCurrentPosition" :loading="locating" type="primary" plain>
              <el-icon><Location /></el-icon>
              定位当前位置
            </el-button>
            <el-button @click="centerToSelected" :disabled="!selectedLocation" plain>
              <el-icon><Aim /></el-icon>
              居中显示
            </el-button>
          </div>
          <div class="selected-info" v-if="selectedLocation">
            <h4>已选位置信息</h4>
            <el-divider />
            <div class="info-item">
              <span class="label">经度:</span>
              <span class="value">{{ selectedLocation.longitude.toFixed(6) }}</span>
            </div>
            <div class="info-item">
              <span class="label">纬度:</span>
              <span class="value">{{ selectedLocation.latitude.toFixed(6) }}</span>
            </div>
            <div class="info-item" v-if="selectedLocation.address">
              <span class="label">地址:</span>
              <span class="value">{{ selectedLocation.address }}</span>
            </div>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="mapDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="confirmLocation" 
          :disabled="!selectedLocation"
        >
          确定
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
/* eslint-disable */
/* global BMap, BMAP_ANCHOR_TOP_LEFT, BMAP_NAVIGATION_CONTROL_SMALL, BMAP_ANCHOR_BOTTOM_LEFT, BMAP_STATUS_SUCCESS */

import { ref, nextTick, onBeforeUnmount } from 'vue'
import { ElMessage } from 'element-plus'
import { Location, Aim, Loading, Search } from '@element-plus/icons-vue'
import request from '@/utils/request'

// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
const mapLoading = ref(true)
const searchQuery = ref('')
const isMapApiLoaded = ref(false)

let map = null
let marker = null
let circle = null
let geocoder = null
let localSearch = null

// 组件卸载前清理地图
onBeforeUnmount(() => {
  cleanMap()
})

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (window.BMap && isMapApiLoaded.value) {
      resolve()
      return
    }

    // 防止重复加载
    if (window._baiduMapLoading) {
      const timer = setInterval(() => {
        if (window.BMap && isMapApiLoaded.value) {
          clearInterval(timer)
          resolve()
        }
      }, 100)
      return
    }

    window._baiduMapLoading = true
    
    const script = document.createElement('script')
    script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
    script.onerror = () => {
      window._baiduMapLoading = false
      reject(new Error('百度地图加载失败'))
      document.head.removeChild(script)
    }
    
    window.initBaiduMap = () => {
      window._baiduMapLoading = false
      isMapApiLoaded.value = true
      resolve()
    }
    
    document.head.appendChild(script)
  })
}

// 初始化地图
const initMap = () => {
  try {
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 清空容器
    mapContainer.innerHTML = ''
    
    if (!window.BMap) {
      throw new Error('百度地图API未正确加载')
    }
    
    // 创建地图实例
    map = new BMap.Map('baidu-map-container', {
      enableMapClick: true,
      minZoom: 10,
      maxZoom: 19
    })
    
    // 设置默认中心点
    const defaultPoint = form.value.location 
      ? new BMap.Point(form.value.location.longitude, form.value.location.latitude)
      : new BMap.Point(116.404, 39.915)
    
    map.centerAndZoom(defaultPoint, form.value.location ? 17 : 15)
    
    // 启用控件
    map.enableScrollWheelZoom(true)
    map.enableDragging()
    map.enableDoubleClickZoom()
    
    // 添加控件
    map.addControl(new BMap.NavigationControl({
      anchor: BMAP_ANCHOR_TOP_LEFT,
      type: BMAP_NAVIGATION_CONTROL_SMALL
    }))
    map.addControl(new BMap.ScaleControl({
      anchor: BMAP_ANCHOR_BOTTOM_LEFT
    }))
    
    // 设置地图样式
    map.setMapStyleV2({ 
      styleJson: [
        {
          "featureType": "water",
          "elementType": "all",
          "stylers": { "color": "#d1d1d1" }
        },
        {
          "featureType": "land",
          "elementType": "all",
          "stylers": { "color": "#f3f3f3" }
        },
        {
          "featureType": "road",
          "elementType": "all",
          "stylers": { "color": "#ffffff" }
        },
        {
          "featureType": "poi",
          "elementType": "all",
          "stylers": { "visibility": "off" }
        }
      ]
    })
    
    // 初始化地理编码器
    geocoder = new BMap.Geocoder()
    
    // 初始化本地搜索
    localSearch = new BMap.LocalSearch(map, {
      renderOptions: { 
        map: map, 
        panel: null,
        autoViewport: true,
        selectFirstResult: true
      },
      onSearchComplete: handleSearchComplete
    })
    
    // 添加点击事件
    map.addEventListener('click', handleMapClick)
    
    // 如果有已选位置，显示标记
    if (form.value.location) {
      updateSelectedLocation(
        form.value.location.longitude,
        form.value.location.latitude
      )
    }

    mapLoading.value = false
  } catch (error) {
    console.error('地图初始化失败:', error)
    ElMessage.error('地图初始化失败，请刷新重试')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索完成处理
const handleSearchComplete = (results) => {
  if (localSearch.getStatus() !== BMAP_STATUS_SUCCESS) {
    ElMessage.warning('未找到搜索结果')
    return
  }
  
  // 自动选择第一个结果
  if (results.getNumPois() > 0) {
    const firstResult = results.getPoi(0)
    updateSelectedLocation(firstResult.point.lng, firstResult.point.lat)
    ElMessage.success(`已定位到: ${firstResult.title}`)
  }
}

// 地图点击处理
const handleMapClick = async (e) => {
  try {
    await updateSelectedLocation(e.point.lng, e.point.lat)
  } catch (error) {
    console.error('位置选择失败:', error)
    ElMessage.error('位置选择失败')
  }
}

// 更新选中位置
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧覆盖物
    if (marker) map.removeOverlay(marker)
    if (circle) map.removeOverlay(circle)
    
    // 添加新标记（可拖拽）
    marker = new BMap.Marker(point, { 
      enableDragging: true,
      raiseOnDrag: true
    })
    marker.addEventListener('dragend', (e) => {
      updateSelectedLocation(e.point.lng, e.point.lat)
    })
    map.addOverlay(marker)
    
    // 添加范围圈
    circle = new BMap.Circle(point, form.value.radius, {
      strokeColor: "#1890ff",
      strokeWeight: 2,
      strokeOpacity: 0.8,
      fillColor: "#1890ff",
      fillOpacity: 0.2
    })
    map.addOverlay(circle)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        resolve(result ? formatAddress(result.addressComponents) : '未知地址')
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
    
    // 居中显示
    map.panTo(point)
    
  } catch (error) {
    console.error('更新位置失败:', error)
    throw error
  }
}

// 格式化地址
const formatAddress = (addComp) => {
  const { province, city, district, street, streetNumber } = addComp
  return `${province || ''}${city || ''}${district || ''}${street || ''}${streetNumber || ''}`
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    map.clearOverlays()
    map = null
  }
  marker = null
  circle = null
  localSearch = null
  selectedLocation.value = null
  mapLoading.value = true
  searchQuery.value = ''
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    locating.value = true
    mapDialogVisible.value = true
    
    await nextTick()
    
    // 加载地图API
    await loadBaiduMap()
    
    // 确保容器已准备好
    if (!document.getElementById('baidu-map-container')) {
      throw new Error('地图容器未找到')
    }
    
    // 初始化地图
    initMap()
    
  } catch (error) {
    console.error('打开地图失败:', error)
    ElMessage.error(error.message || '地图加载失败')
    mapDialogVisible.value = false
  } finally {
    locating.value = false
  }
}

// 搜索处理
const handleSearch = () => {
  if (!searchQuery.value.trim()) {
    ElMessage.warning('请输入搜索关键词')
    return
  }
  
  if (!localSearch) {
    ElMessage.error('搜索功能未初始化')
    return
  }
  
  localSearch.search(searchQuery.value)
}

// 居中显示已选位置
const centerToSelected = () => {
  if (selectedLocation.value && map) {
    const point = new BMap.Point(
      selectedLocation.value.longitude,
      selectedLocation.value.latitude
    )
    map.panTo(point)
    map.setZoom(17)
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        // 获取地址信息
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // 简化的坐标转换算法
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) geocoder = new BMap.Geocoder()
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
    ElMessage.success('位置选择成功')
  }
}

// 提交表单
const submitForm = () => {
  // 验证时间范围
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  // 验证位置信息
  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  // 构建请求数据
  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  // 发送请求
  request({
    method: 'post',
    url: '/releasecheckin',
    data: payload
  }).then((response) => {
    if (response.code === 0) {
      ElMessage.success('打卡发布成功')
      resetForm()
    } else {
      ElMessage.error(response.message || '打卡发布失败')
    }
  }).catch((error) => {
    console.error(error)
    ElMessage.error('打卡发布失败')
  })
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
  ElMessage.success('表单已重置')
}
</script>

<style scoped>
.publish-checkin-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
}

.form-card {
  border-radius: 8px;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

.location-info {
  margin-top: 10px;
  padding: 10px;
  background-color: #f5f7fa;
  border-radius: 4px;
  font-size: 14px;
}

.location-info p {
  margin: 5px 0;
}

.map-dialog-content {
  display: flex;
  height: 60vh;
  gap: 16px;
}

.map-container {
  flex: 1;
  height: 100%;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  position: relative;
  background-color: #f5f7fa;
}

.map-loading {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8);
  z-index: 10;
  color: #606266;
}

.map-loading .el-icon {
  font-size: 24px;
  margin-bottom: 8px;
  animation: rotating 2s linear infinite;
}

.search-box {
  margin-bottom: 16px;
}

@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.map-controls {
  width: 280px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.control-buttons {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.selected-info {
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
}

.selected-info h4 {
  margin: 0 0 8px 0;
  color: #303133;
}

.info-item {
  display: flex;
  margin: 8px 0;
  line-height: 1.5;
}

.info-item .label {
  color: #606266;
  min-width: 40px;
  margin-right: 8px;
}

.info-item .value {
  color: #303133;
  word-break: break-all;
}
</style>


--------------------version3
<template>
  <div class="publish-checkin-container">
    <el-card shadow="hover" class="form-card">
      <template #header>
        <div class="card-header">
          <span>发布新打卡</span>
        </div>
      </template>

      <el-form :model="form" label-width="120px" label-position="left">
        <!-- 打卡方式选择 -->
        <el-form-item label="打卡方式">
          <el-radio-group v-model="form.checkinType">
            <el-radio label="mixed">混合模式</el-radio>
            <el-radio label="face">人脸识别</el-radio>
            <el-radio label="location">地理位置</el-radio>
          </el-radio-group>
        </el-form-item>

        <!-- 地理位置设置 -->
        <div v-if="form.checkinType === 'location'">
          <el-form-item label="选择地点">
            <el-button type="primary" @click="openMapDialog">选择地理位置</el-button>
            <el-button @click="getCurrentLocation" :loading="locating">
              <el-icon><Location /></el-icon>
              使用当前位置
            </el-button>
            <div v-if="form.location" class="location-info">
              <p>经度: {{ form.location.longitude.toFixed(6) }}</p>
              <p>纬度: {{ form.location.latitude.toFixed(6) }}</p>
              <p v-if="form.location.address">地址: {{ form.location.address }}</p>
            </div>
          </el-form-item>

          <el-form-item label="打卡范围(米)">
            <el-input-number 
              v-model="form.radius" 
              :min="50" 
              :max="1000" 
              :step="50"
            />
          </el-form-item>
        </div>

        <!-- 打卡时间设置 -->
        <el-form-item label="打卡时间">
          <el-date-picker
            v-model="form.timeRange"
            type="datetimerange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>

        <el-form-item>
          <el-button type="primary" @click="submitForm">发布打卡</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 地图选择对话框 -->
    <el-dialog
      v-model="mapDialogVisible"
      title="选择打卡位置"
      width="80%"
      @closed="cleanMap"
    >
      <div class="map-dialog-content">
        <div id="baidu-map-container" class="map-container">
          <div v-if="mapLoading" class="map-loading">
            <el-icon class="is-loading"><Loading /></el-icon>
            <span>地图加载中...</span>
          </div>
        </div>
        <div class="map-controls">
          <div class="search-box">
            <el-input
              v-model="searchQuery"
              placeholder="搜索地点"
              clearable
              @keyup.enter="handleSearch"
            >
              <template #append>
                <el-button @click="handleSearch">
                  <el-icon><Search /></el-icon>
                </el-button>
              </template>
            </el-input>
          </div>
          <div class="control-buttons">
            <el-button @click="locateCurrentPosition" :loading="locating" type="primary" plain>
              <el-icon><Location /></el-icon>
              定位当前位置
            </el-button>
            <el-button @click="centerToSelected" :disabled="!selectedLocation" plain>
              <el-icon><Aim /></el-icon>
              居中显示
            </el-button>
          </div>
          <div class="selected-info" v-if="selectedLocation">
            <h4>已选位置信息</h4>
            <el-divider />
            <div class="info-item">
              <span class="label">经度:</span>
              <span class="value">{{ selectedLocation.longitude.toFixed(6) }}</span>
            </div>
            <div class="info-item">
              <span class="label">纬度:</span>
              <span class="value">{{ selectedLocation.latitude.toFixed(6) }}</span>
            </div>
            <div class="info-item" v-if="selectedLocation.address">
              <span class="label">地址:</span>
              <span class="value">{{ selectedLocation.address }}</span>
            </div>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="mapDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="confirmLocation" 
          :disabled="!selectedLocation"
        >
          确定
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
/* eslint-disable */
/* global BMap, BMAP_ANCHOR_TOP_LEFT, BMAP_NAVIGATION_CONTROL_SMALL, BMAP_ANCHOR_BOTTOM_LEFT, BMAP_STATUS_SUCCESS */

import { ref, nextTick, onBeforeUnmount, onMounted } from 'vue'
import { ElMessage } from 'element-plus'
import { Location, Aim, Loading, Search } from '@element-plus/icons-vue'
import request from '@/utils/request'

// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
const mapLoading = ref(true)
const searchQuery = ref('')
const isMapApiLoaded = ref(false)

let map = null
let marker = null
let circle = null
let geocoder = null
let localSearch = null

// 组件卸载前清理地图
onBeforeUnmount(() => {
  cleanMap()
})

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (window.BMap && isMapApiLoaded.value) {
      resolve()
      return
    }

    // 防止重复加载
    if (window._baiduMapLoading) {
      const timer = setInterval(() => {
        if (window.BMap && isMapApiLoaded.value) {
          clearInterval(timer)
          resolve()
        }
      }, 100)
      return
    }

    window._baiduMapLoading = true
    
    const script = document.createElement('script')
    script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
    script.onerror = () => {
      window._baiduMapLoading = false
      reject(new Error('百度地图加载失败'))
      document.head.removeChild(script)
    }
    
    window.initBaiduMap = () => {
      window._baiduMapLoading = false
      isMapApiLoaded.value = true
      resolve()
    }
    
    document.head.appendChild(script)
  })
}

// 初始化地图
const initMap = () => {
  try {
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 确保容器有高度
    mapContainer.style.height = '100%'
    
    if (!window.BMap) {
      throw new Error('百度地图API未正确加载')
    }
    
    // 创建地图实例
    map = new BMap.Map('baidu-map-container', {
      enableMapClick: true,
      minZoom: 10,
      maxZoom: 19
    })
    
    // 设置默认中心点
    const defaultPoint = form.value.location 
      ? new BMap.Point(form.value.location.longitude, form.value.location.latitude)
      : new BMap.Point(116.404, 39.915)
    
    map.centerAndZoom(defaultPoint, form.value.location ? 17 : 15)
    
    // 启用控件
    map.enableScrollWheelZoom(true)
    map.enableDragging()
    map.enableDoubleClickZoom()
    
    // 添加控件
    map.addControl(new BMap.NavigationControl({
      anchor: BMAP_ANCHOR_TOP_LEFT,
      type: BMAP_NAVIGATION_CONTROL_SMALL
    }))
    map.addControl(new BMap.ScaleControl({
      anchor: BMAP_ANCHOR_BOTTOM_LEFT
    }))
    
    // 设置地图样式
    map.setMapStyleV2({ 
      styleJson: [
        {
          "featureType": "water",
          "elementType": "all",
          "stylers": { "color": "#d1d1d1" }
        },
        {
          "featureType": "land",
          "elementType": "all",
          "stylers": { "color": "#f3f3f3" }
        },
        {
          "featureType": "road",
          "elementType": "all",
          "stylers": { "color": "#ffffff" }
        },
        {
          "featureType": "poi",
          "elementType": "all",
          "stylers": { "visibility": "off" }
        }
      ]
    })
    
    // 初始化地理编码器
    geocoder = new BMap.Geocoder()
    
    // 初始化本地搜索
    localSearch = new BMap.LocalSearch(map, {
      renderOptions: { 
        map: map, 
        panel: null,
        autoViewport: true,
        selectFirstResult: true
      },
      onSearchComplete: handleSearchComplete
    })
    
    // 添加点击事件
    map.addEventListener('click', handleMapClick)
    
    // 如果有已选位置，显示标记
    if (form.value.location) {
      updateSelectedLocation(
        form.value.location.longitude,
        form.value.location.latitude
      )
    }

    mapLoading.value = false
  } catch (error) {
    console.error('地图初始化失败:', error)
    ElMessage.error('地图初始化失败，请刷新重试')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索完成处理
const handleSearchComplete = (results) => {
  if (localSearch.getStatus() !== BMAP_STATUS_SUCCESS) {
    ElMessage.warning('未找到搜索结果')
    return
  }
  
  // 自动选择第一个结果
  if (results.getNumPois() > 0) {
    const firstResult = results.getPoi(0)
    updateSelectedLocation(firstResult.point.lng, firstResult.point.lat)
    ElMessage.success(`已定位到: ${firstResult.title}`)
  }
}

// 地图点击处理
const handleMapClick = async (e) => {
  try {
    await updateSelectedLocation(e.point.lng, e.point.lat)
  } catch (error) {
    console.error('位置选择失败:', error)
    ElMessage.error('位置选择失败')
  }
}

// 更新选中位置
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧覆盖物
    if (marker) map.removeOverlay(marker)
    if (circle) map.removeOverlay(circle)
    
    // 添加新标记（可拖拽）
    marker = new BMap.Marker(point, { 
      enableDragging: true,
      raiseOnDrag: true
    })
    marker.addEventListener('dragend', (e) => {
      updateSelectedLocation(e.point.lng, e.point.lat)
    })
    map.addOverlay(marker)
    
    // 添加范围圈
    circle = new BMap.Circle(point, form.value.radius, {
      strokeColor: "#1890ff",
      strokeWeight: 2,
      strokeOpacity: 0.8,
      fillColor: "#1890ff",
      fillOpacity: 0.2
    })
    map.addOverlay(circle)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        resolve(result ? formatAddress(result.addressComponents) : '未知地址')
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
    
    // 居中显示
    map.panTo(point)
    
  } catch (error) {
    console.error('更新位置失败:', error)
    throw error
  }
}

// 格式化地址
const formatAddress = (addComp) => {
  const { province, city, district, street, streetNumber } = addComp
  return `${province || ''}${city || ''}${district || ''}${street || ''}${streetNumber || ''}`
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    try {
      map.clearOverlays()
      map = null
    } catch (e) {
      console.error('清理地图时出错:', e)
    }
  }
  marker = null
  circle = null
  localSearch = null
  selectedLocation.value = null
  mapLoading.value = true
  searchQuery.value = ''
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    mapDialogVisible.value = true
    mapLoading.value = true
    
    await nextTick()
    
    // 加载地图API
    await loadBaiduMap()
    
    // 确保容器已准备好
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 初始化地图
    initMap()
    
  } catch (error) {
    console.error('打开地图失败:', error)
    ElMessage.error(error.message || '地图加载失败')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索处理
const handleSearch = () => {
  if (!searchQuery.value.trim()) {
    ElMessage.warning('请输入搜索关键词')
    return
  }
  
  if (!localSearch) {
    ElMessage.error('搜索功能未初始化')
    return
  }
  
  localSearch.search(searchQuery.value)
}

// 居中显示已选位置
const centerToSelected = () => {
  if (selectedLocation.value && map) {
    const point = new BMap.Point(
      selectedLocation.value.longitude,
      selectedLocation.value.latitude
    )
    map.panTo(point)
    map.setZoom(17)
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        // 获取地址信息
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // 简化的坐标转换算法
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) geocoder = new BMap.Geocoder()
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
    ElMessage.success('位置选择成功')
  }
}

// 提交表单
const submitForm = () => {
  // 验证时间范围
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  // 验证位置信息
  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  // 构建请求数据
  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  // 发送请求
  request({
    method: 'post',
    url: '/releasecheckin',
    data: payload
  }).then((response) => {
    if (response.code === 0) {
      ElMessage.success('打卡发布成功')
      resetForm()
    } else {
      ElMessage.error(response.message || '打卡发布失败')
    }
  }).catch((error) => {
    console.error(error)
    ElMessage.error('打卡发布失败')
  })
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
  ElMessage.success('表单已重置')
}
</script>

<style scoped>
.publish-checkin-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
}

.form-card {
  border-radius: 8px;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

.location-info {
  margin-top: 10px;
  padding: 10px;
  background-color: #f5f7fa;
  border-radius: 4px;
  font-size: 14px;
}

.location-info p {
  margin: 5px 0;
}

.map-dialog-content {
  display: flex;
  height: 60vh;
  gap: 16px;
}

.map-container {
  flex: 1;
  height: 100%;
  min-height: 400px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  position: relative;
  background-color: #f5f7fa;
}

.map-loading {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8);
  z-index: 10;
  color: #606266;
}

.map-loading .el-icon {
  font-size: 24px;
  margin-bottom: 8px;
  animation: rotating 2s linear infinite;
}

.search-box {
  margin-bottom: 16px;
}

@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.map-controls {
  width: 280px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.control-buttons {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.selected-info {
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
}

.selected-info h4 {
  margin: 0 0 8px 0;
  color: #303133;
}

.info-item {
  display: flex;
  margin: 8px 0;
  line-height: 1.5;
}

.info-item .label {
  color: #606266;
  min-width: 40px;
  margin-right: 8px;
}

.info-item .value {
  color: #303133;
  word-break: break-all;
}
</style>







---------------------------------------------
<template>
  <div class="publish-checkin-container">
    <el-card shadow="hover" class="form-card">
      <template #header>
        <div class="card-header">
          <span>发布新打卡</span>
        </div>
      </template>

      <el-form :model="form" label-width="120px" label-position="left">
        <!-- 打卡方式选择 -->
        <el-form-item label="打卡方式">
          <el-radio-group v-model="form.checkinType">
            <el-radio label="mixed">混合模式</el-radio>
            <el-radio label="face">人脸识别</el-radio>
            <el-radio label="location">地理位置</el-radio>
          </el-radio-group>
        </el-form-item>

        <!-- 地理位置设置 -->
        <div v-if="form.checkinType === 'location'">
          <el-form-item label="选择地点">
            <el-button type="primary" @click="openMapDialog">选择地理位置</el-button>
            <el-button @click="getCurrentLocation" :loading="locating">
              <el-icon><Location /></el-icon>
              使用当前位置
            </el-button>
            <div v-if="form.location" class="location-info">
              <p>经度: {{ form.location.longitude.toFixed(6) }}</p>
              <p>纬度: {{ form.location.latitude.toFixed(6) }}</p>
              <p v-if="form.location.address">地址: {{ form.location.address }}</p>
            </div>
          </el-form-item>

          <el-form-item label="打卡范围(米)">
            <el-input-number 
              v-model="form.radius" 
              :min="50" 
              :max="1000" 
              :step="50"
            />
          </el-form-item>
        </div>

        <!-- 打卡时间设置 -->
        <el-form-item label="打卡时间">
          <el-date-picker
            v-model="form.timeRange"
            type="datetimerange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>

        <el-form-item>
          <el-button style="background-colorr: #215476;" @click="submitForm">发布打卡</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 地图选择对话框 -->
    <el-dialog
      v-model="mapDialogVisible"
      title="选择打卡位置"
      width="80%"
      @closed="cleanMap"
    >
      <div class="map-dialog-content">
        <div id="baidu-map-container" class="map-container">
          <div v-if="mapLoading" class="map-loading">
            <el-icon class="is-loading"><Loading /></el-icon>
            <span>地图加载中...</span>
          </div>
        </div>
        <div class="map-controls">
          <div class="search-box">
            <el-input
              v-model="searchQuery"
              placeholder="搜索地点"
              clearable
              @keyup.enter="handleSearch"
            >
              <template #append>
                <el-button @click="handleSearch">
                  <el-icon><Search /></el-icon>
                </el-button>
              </template>
            </el-input>
          </div>
          <div class="control-buttons">
            <el-button @click="locateCurrentPosition" :loading="locating" type="primary" plain>
              <el-icon><Location /></el-icon>
              定位当前位置
            </el-button>
            <el-button @click="centerToSelected" :disabled="!selectedLocation" plain>
              <el-icon><Aim /></el-icon>
              居中显示
            </el-button>
          </div>
          <div class="selected-info" v-if="selectedLocation">
            <h4>已选位置信息</h4>
            <el-divider />
            <div class="info-item">
              <span class="label">经度:</span>
              <span class="value">{{ selectedLocation.longitude.toFixed(6) }}</span>
            </div>
            <div class="info-item">
              <span class="label">纬度:</span>
              <span class="value">{{ selectedLocation.latitude.toFixed(6) }}</span>
            </div>
            <div class="info-item" v-if="selectedLocation.address">
              <span class="label">地址:</span>
              <span class="value">{{ selectedLocation.address }}</span>
            </div>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="mapDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="confirmLocation" 
          :disabled="!selectedLocation"
        >
          确定
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
/* eslint-disable */
/* global BMap, BMAP_ANCHOR_TOP_LEFT, BMAP_NAVIGATION_CONTROL_SMALL, BMAP_ANCHOR_BOTTOM_LEFT, BMAP_STATUS_SUCCESS */

import { ref, nextTick, onBeforeUnmount, onMounted } from 'vue'
import { ElMessage } from 'element-plus'
import { Location, Aim, Loading, Search } from '@element-plus/icons-vue'
import request from '@/utils/request'

// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
const mapLoading = ref(true)
const searchQuery = ref('')
const isMapApiLoaded = ref(false)

let map = null
let marker = null
let circle = null
let geocoder = null
let localSearch = null

// 组件卸载前清理地图
onBeforeUnmount(() => {
  cleanMap()
})

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (window.BMap && isMapApiLoaded.value) {
      resolve()
      return
    }

    // 防止重复加载
    if (window._baiduMapLoading) {
      const timer = setInterval(() => {
        if (window.BMap && isMapApiLoaded.value) {
          clearInterval(timer)
          resolve()
        }
      }, 100)
      return
    }

    window._baiduMapLoading = true
    
    const script = document.createElement('script')
    script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
    script.onerror = () => {
      window._baiduMapLoading = false
      reject(new Error('百度地图加载失败'))
      document.head.removeChild(script)
    }
    
    window.initBaiduMap = () => {
      window._baiduMapLoading = false
      isMapApiLoaded.value = true
      resolve()
    }
    
    document.head.appendChild(script)
  })
}

// 初始化地图
const initMap = () => {
  try {
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 确保容器有高度
    mapContainer.style.height = '100%'
    
    if (!window.BMap) {
      throw new Error('百度地图API未正确加载')
    }
    
    // 创建地图实例
    map = new BMap.Map('baidu-map-container', {
      enableMapClick: true,
      minZoom: 10,
      maxZoom: 19
    })
    
    // 设置默认中心点
    const defaultPoint = form.value.location 
      ? new BMap.Point(form.value.location.longitude, form.value.location.latitude)
      : new BMap.Point(116.404, 39.915)
    
    map.centerAndZoom(defaultPoint, form.value.location ? 17 : 15)
    
    // 启用控件
    map.enableScrollWheelZoom(true)
    map.enableDragging()
    map.enableDoubleClickZoom()
    
    // 添加控件
    map.addControl(new BMap.NavigationControl({
      anchor: BMAP_ANCHOR_TOP_LEFT,
      type: BMAP_NAVIGATION_CONTROL_SMALL
    }))
    map.addControl(new BMap.ScaleControl({
      anchor: BMAP_ANCHOR_BOTTOM_LEFT
    }))
    
    // 设置地图样式
    map.setMapStyleV2({ 
      styleJson: [
        {
          "featureType": "water",
          "elementType": "all",
          "stylers": { "color": "#d1d1d1" }
        },
        {
          "featureType": "land",
          "elementType": "all",
          "stylers": { "color": "#f3f3f3" }
        },
        {
          "featureType": "road",
          "elementType": "all",
          "stylers": { "color": "#ffffff" }
        },
        {
          "featureType": "poi",
          "elementType": "all",
          "stylers": { "visibility": "off" }
        }
      ]
    })
    
    // 初始化地理编码器
    geocoder = new BMap.Geocoder()
    
    // 初始化本地搜索
    localSearch = new BMap.LocalSearch(map, {
      renderOptions: { 
        map: map, 
        panel: null,
        autoViewport: true,
        selectFirstResult: true
      },
      onSearchComplete: handleSearchComplete
    })
    
    // 添加点击事件
    map.addEventListener('click', handleMapClick)
    
    // 如果有已选位置，显示标记
    if (form.value.location) {
      updateSelectedLocation(
        form.value.location.longitude,
        form.value.location.latitude
      )
    }

    mapLoading.value = false
  } catch (error) {
    console.error('地图初始化失败:', error)
    ElMessage.error('地图初始化失败，请刷新重试')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索完成处理
const handleSearchComplete = (results) => {
  if (localSearch.getStatus() !== BMAP_STATUS_SUCCESS) {
    ElMessage.warning('未找到搜索结果')
    return
  }
  
  // 自动选择第一个结果
  if (results.getNumPois() > 0) {
    const firstResult = results.getPoi(0)
    updateSelectedLocation(firstResult.point.lng, firstResult.point.lat)
    ElMessage.success(`已定位到: ${firstResult.title}`)
  }
}

// 地图点击处理
const handleMapClick = async (e) => {
  try {
    await updateSelectedLocation(e.point.lng, e.point.lat)
  } catch (error) {
    console.error('位置选择失败:', error)
    ElMessage.error('位置选择失败')
  }
}

// 更新选中位置
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧覆盖物
    if (marker) map.removeOverlay(marker)
    if (circle) map.removeOverlay(circle)
    
    // 添加新标记（可拖拽）
    marker = new BMap.Marker(point, { 
      enableDragging: true,
      raiseOnDrag: true
    })
    marker.addEventListener('dragend', (e) => {
      updateSelectedLocation(e.point.lng, e.point.lat)
    })
    map.addOverlay(marker)
    
    // 添加范围圈
    circle = new BMap.Circle(point, form.value.radius, {
      strokeColor: "#1890ff",
      strokeWeight: 2,
      strokeOpacity: 0.8,
      fillColor: "#1890ff",
      fillOpacity: 0.2
    })
    map.addOverlay(circle)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        resolve(result ? formatAddress(result.addressComponents) : '未知地址')
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
    
    // 居中显示
    map.panTo(point)
    
  } catch (error) {
    console.error('更新位置失败:', error)
    throw error
  }
}

// 格式化地址
const formatAddress = (addComp) => {
  const { province, city, district, street, streetNumber } = addComp
  return `${province || ''}${city || ''}${district || ''}${street || ''}${streetNumber || ''}`
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    try {
      map.clearOverlays()
      map = null
    } catch (e) {
      console.error('清理地图时出错:', e)
    }
  }
  marker = null
  circle = null
  localSearch = null
  selectedLocation.value = null
  mapLoading.value = true
  searchQuery.value = ''
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    mapDialogVisible.value = true
    mapLoading.value = true
    
    await nextTick()
    
    // 加载地图API
    await loadBaiduMap()
    
    // 确保容器已准备好
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 初始化地图
    initMap()
    
  } catch (error) {
    console.error('打开地图失败:', error)
    ElMessage.error(error.message || '地图加载失败')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索处理
const handleSearch = () => {
  if (!searchQuery.value.trim()) {
    ElMessage.warning('请输入搜索关键词')
    return
  }
  
  if (!localSearch) {
    ElMessage.error('搜索功能未初始化')
    return
  }
  
  localSearch.search(searchQuery.value)
}

// 居中显示已选位置
const centerToSelected = () => {
  if (selectedLocation.value && map) {
    const point = new BMap.Point(
      selectedLocation.value.longitude,
      selectedLocation.value.latitude
    )
    map.panTo(point)
    map.setZoom(17)
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        // 获取地址信息
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // 简化的坐标转换算法
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) geocoder = new BMap.Geocoder()
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
    ElMessage.success('位置选择成功')
  }
}

// 提交表单
const submitForm = () => {
  // 验证时间范围
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  // 验证位置信息
  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  // 构建请求数据
  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  // 发送请求
  request({
    method: 'post',
    url: '/releasecheckin',
    data: payload
  }).then((response) => {
    if (response.code === 0) {
      ElMessage.success('打卡发布成功')
      resetForm()
    } else {
      ElMessage.error(response.message || '打卡发布失败')
    }
  }).catch((error) => {
    console.error(error)
    ElMessage.error('打卡发布失败')
  })
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
  ElMessage.success('表单已重置')
}
</script>

<style scoped>
.publish-checkin-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
}

.form-card {
  border-radius: 8px;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

.location-info {
  margin-top: 10px;
  padding: 10px;
  background-color: #f5f7fa;
  border-radius: 4px;
  font-size: 14px;
}

.location-info p {
  margin: 5px 0;
}

.map-dialog-content {
  display: flex;
  height: 60vh;
  gap: 16px;
}

.map-container {
  flex: 1;
  height: 100%;
  min-height: 400px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  position: relative;
  background-color: #f5f7fa;
}

.map-loading {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8);
  z-index: 10;
  color: #606266;
}

.map-loading .el-icon {
  font-size: 24px;
  margin-bottom: 8px;
  animation: rotating 2s linear infinite;
}

.search-box {
  margin-bottom: 16px;
}

@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.map-controls {
  width: 280px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.control-buttons {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.selected-info {
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
}

.selected-info h4 {
  margin: 0 0 8px 0;
  color: #303133;
}

.info-item {
  display: flex;
  margin: 8px 0;
  line-height: 1.5;
}

.info-item .label {
  color: #606266;
  min-width: 40px;
  margin-right: 8px;
}

.info-item .value {
  color: #303133;
  word-break: break-all;
}
</style>

--------------------------------------4.29
<script setup>
/* eslint-disable */
/* global BMap, BMAP_ANCHOR_TOP_LEFT, BMAP_NAVIGATION_CONTROL_SMALL, BMAP_ANCHOR_BOTTOM_LEFT, BMAP_STATUS_SUCCESS */

import { ref, nextTick, onBeforeUnmount, onMounted } from 'vue'
import { ElMessage } from 'element-plus'
import { Location, Aim, Loading, Search } from '@element-plus/icons-vue'
import request from '@/utils/request'

// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
const mapLoading = ref(true)
const searchQuery = ref('')
const isMapApiLoaded = ref(false)

let map = null
let marker = null
let circle = null
let geocoder = null
let localSearch = null

// 组件卸载前清理地图
onBeforeUnmount(() => {
  cleanMap()
})

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (window.BMap && isMapApiLoaded.value) {
      resolve()
      return
    }

    // 防止重复加载
    if (window._baiduMapLoading) {
      const timer = setInterval(() => {
        if (window.BMap && isMapApiLoaded.value) {
          clearInterval(timer)
          resolve()
        }
      }, 100)
      return
    }

    window._baiduMapLoading = true
    
    const script = document.createElement('script')
    script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
    script.onerror = () => {
      window._baiduMapLoading = false
      reject(new Error('百度地图加载失败'))
      document.head.removeChild(script)
    }
    
    window.initBaiduMap = () => {
      window._baiduMapLoading = false
      isMapApiLoaded.value = true
      resolve()
    }
    
    document.head.appendChild(script)
  })
}

// 初始化地图
const initMap = () => {
  try {
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 确保容器有高度
    mapContainer.style.height = '100%'
    
    if (!window.BMap) {
      throw new Error('百度地图API未正确加载')
    }
    
    // 创建地图实例
    map = new BMap.Map('baidu-map-container', {
      enableMapClick: true,
      minZoom: 10,
      maxZoom: 19
    })
    
    // 设置默认中心点
    const defaultPoint = form.value.location 
      ? new BMap.Point(form.value.location.longitude, form.value.location.latitude)
      : new BMap.Point(116.404, 39.915)
    
    map.centerAndZoom(defaultPoint, form.value.location ? 17 : 15)
    
    // 启用控件
    map.enableScrollWheelZoom(true)
    map.enableDragging()
    map.enableDoubleClickZoom()
    
    // 添加控件
    map.addControl(new BMap.NavigationControl({
      anchor: BMAP_ANCHOR_TOP_LEFT,
      type: BMAP_NAVIGATION_CONTROL_SMALL
    }))
    map.addControl(new BMap.ScaleControl({
      anchor: BMAP_ANCHOR_BOTTOM_LEFT
    }))
    
    // 设置地图样式
    map.setMapStyleV2({ 
      styleJson: [
        {
          "featureType": "water",
          "elementType": "all",
          "stylers": { "color": "#d1d1d1" }
        },
        {
          "featureType": "land",
          "elementType": "all",
          "stylers": { "color": "#f3f3f3" }
        },
        {
          "featureType": "road",
          "elementType": "all",
          "stylers": { "color": "#ffffff" }
        },
        {
          "featureType": "poi",
          "elementType": "all",
          "stylers": { "visibility": "off" }
        }
      ]
    })
    
    // 初始化地理编码器
    geocoder = new BMap.Geocoder()
    
    // 初始化本地搜索
    localSearch = new BMap.LocalSearch(map, {
      renderOptions: { 
        map: map, 
        panel: null,
        autoViewport: true,
        selectFirstResult: true
      },
      onSearchComplete: handleSearchComplete
    })
    
    // 添加点击事件
    map.addEventListener('click', handleMapClick)
    
    // 如果有已选位置，显示标记
    if (form.value.location) {
      updateSelectedLocation(
        form.value.location.longitude,
        form.value.location.latitude
      )
    }

    mapLoading.value = false
  } catch (error) {
    console.error('地图初始化失败:', error)
    ElMessage.error('地图初始化失败，请刷新重试')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索完成处理
const handleSearchComplete = (results) => {
  if (localSearch.getStatus() !== BMAP_STATUS_SUCCESS) {
    ElMessage.warning('未找到搜索结果')
    return
  }
  
  // 自动选择第一个结果
  if (results.getNumPois() > 0) {
    const firstResult = results.getPoi(0)
    updateSelectedLocation(firstResult.point.lng, firstResult.point.lat)
    ElMessage.success(`已定位到: ${firstResult.title}`)
  }
}

// 地图点击处理
const handleMapClick = async (e) => {
  try {
    await updateSelectedLocation(e.point.lng, e.point.lat)
  } catch (error) {
    console.error('位置选择失败:', error)
    ElMessage.error('位置选择失败')
  }
}

// 更新选中位置
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧覆盖物
    if (marker) map.removeOverlay(marker)
    if (circle) map.removeOverlay(circle)
    
    // 添加新标记（可拖拽）
    marker = new BMap.Marker(point, { 
      enableDragging: true,
      raiseOnDrag: true
    })
    marker.addEventListener('dragend', (e) => {
      updateSelectedLocation(e.point.lng, e.point.lat)
    })
    map.addOverlay(marker)
    
    // 添加范围圈
    circle = new BMap.Circle(point, form.value.radius, {
      strokeColor: "#1890ff",
      strokeWeight: 2,
      strokeOpacity: 0.8,
      fillColor: "#1890ff",
      fillOpacity: 0.2
    })
    map.addOverlay(circle)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        resolve(result ? formatAddress(result.addressComponents) : '未知地址')
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
    
    // 居中显示
    map.panTo(point)
    
  } catch (error) {
    console.error('更新位置失败:', error)
    throw error
  }
}

// 格式化地址
const formatAddress = (addComp) => {
  const { province, city, district, street, streetNumber } = addComp
  return `${province || ''}${city || ''}${district || ''}${street || ''}${streetNumber || ''}`
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    try {
      map.clearOverlays()
      map = null
    } catch (e) {
      console.error('清理地图时出错:', e)
    }
  }
  marker = null
  circle = null
  localSearch = null
  selectedLocation.value = null
  mapLoading.value = true
  searchQuery.value = ''
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    mapDialogVisible.value = true
    mapLoading.value = true
    
    await nextTick()
    
    // 加载地图API
    await loadBaiduMap()
    
    // 确保容器已准备好
    const mapContainer = document.getElementById('baidu-map-container')
    if (!mapContainer) {
      throw new Error('地图容器未找到')
    }
    
    // 初始化地图
    initMap()
    
  } catch (error) {
    console.error('打开地图失败:', error)
    ElMessage.error(error.message || '地图加载失败')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索处理
const handleSearch = () => {
  if (!searchQuery.value.trim()) {
    ElMessage.warning('请输入搜索关键词')
    return
  }
  
  if (!localSearch) {
    ElMessage.error('搜索功能未初始化')
    return
  }
  
  localSearch.search(searchQuery.value)
}

// 居中显示已选位置
const centerToSelected = () => {
  if (selectedLocation.value && map) {
    const point = new BMap.Point(
      selectedLocation.value.longitude,
      selectedLocation.value.latitude
    )
    map.panTo(point)
    map.setZoom(17)
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        // 将WGS84坐标转换为百度坐标
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        // 获取地址信息
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // 简化的坐标转换算法
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) geocoder = new BMap.Geocoder()
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
    ElMessage.success('位置选择成功')
  }
}

// 提交表单
const submitForm = () => {
  // 验证时间范围
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  // 验证位置信息
  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  // 构建请求数据
  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  // 发送请求
  request({
    method: 'post',
    url: '/releasecheckin',
    data: payload
  }).then((response) => {
    if (response.code === 0) {
      ElMessage.success('打卡发布成功')
      resetForm()
    } else {
      ElMessage.error(response.message || '打卡发布失败')
    }
  }).catch((error) => {
    console.error(error)
    ElMessage.error('打卡发布失败')
  })
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
  ElMessage.success('表单已重置')
}
</script>


---------------------------成功版本
<template>
  <div class="publish-checkin-container">
    <el-card shadow="hover" class="form-card">
      <template #header>
        <div class="card-header">
          <span>发布新打卡</span>
        </div>
      </template>

      <el-form :model="form" label-width="120px" label-position="left">
        <!-- 打卡方式选择 -->
        <el-form-item label="打卡方式">
          <el-radio-group v-model="form.checkinType">
            <el-radio label="mixed">混合模式</el-radio>
            <el-radio label="face">人脸识别</el-radio>
            <el-radio label="location">地理位置</el-radio>
          </el-radio-group>
        </el-form-item>

        <!-- 地理位置设置 -->
        <div v-if="form.checkinType === 'location'">
          <el-form-item label="选择地点">
            <el-button type="primary" @click="openMapDialog">选择地理位置</el-button>
            <el-button @click="getCurrentLocation" :loading="locating">
              <el-icon><Location /></el-icon>
              使用当前位置
            </el-button>
            <div v-if="form.location" class="location-info">
              <p>经度: {{ form.location.longitude.toFixed(6) }}</p>
              <p>纬度: {{ form.location.latitude.toFixed(6) }}</p>
              <p v-if="form.location.address">地址: {{ form.location.address }}</p>
            </div>
          </el-form-item>

          <el-form-item label="打卡范围(米)">
            <el-input-number 
              v-model="form.radius" 
              :min="50" 
              :max="1000" 
              :step="50"
            />
          </el-form-item>
        </div>

        <!-- 打卡时间设置 -->
        <el-form-item label="打卡时间">
          <el-date-picker
            v-model="form.timeRange"
            type="datetimerange"
            range-separator="至"
            start-placeholder="开始时间"
            end-placeholder="结束时间"
            value-format="YYYY-MM-DD HH:mm:ss"
          />
        </el-form-item>

        <el-form-item>
          <el-button type="primary" @click="submitForm">发布打卡</el-button>
          <el-button @click="resetForm">重置</el-button>
        </el-form-item>
      </el-form>
    </el-card>

    <!-- 地图选择对话框 -->
    <el-dialog
      v-model="mapDialogVisible"
      title="选择打卡位置"
      width="80%"
      @closed="cleanMap"
    >
      <div class="map-dialog-content">
        <div id="baidu-map-container" class="map-container">
          <div v-if="mapLoading" class="map-loading">
            <el-icon class="is-loading"><Loading /></el-icon>
            <span>地图加载中...</span>
          </div>
        </div>
        <div class="map-controls">
          <div class="search-box">
            <el-input
              v-model="searchQuery"
              placeholder="搜索地点"
              clearable
              @keyup.enter="handleSearch"
            >
              <template #append>
                <el-button @click="handleSearch">
                  <el-icon><Search /></el-icon>
                </el-button>
              </template>
            </el-input>
          </div>
          <div class="control-buttons">
            <el-button @click="locateCurrentPosition" :loading="locating" type="primary" plain>
              <el-icon><Location /></el-icon>
              定位当前位置
            </el-button>
            <el-button @click="centerToSelected" :disabled="!selectedLocation" plain>
              <el-icon><Aim /></el-icon>
              居中显示
            </el-button>
          </div>
          <div class="selected-info" v-if="selectedLocation">
            <h4>已选位置信息</h4>
            <el-divider />
            <div class="info-item">
              <span class="label">经度:</span>
              <span class="value">{{ selectedLocation.longitude.toFixed(6) }}</span>
            </div>
            <div class="info-item">
              <span class="label">纬度:</span>
              <span class="value">{{ selectedLocation.latitude.toFixed(6) }}</span>
            </div>
            <div class="info-item" v-if="selectedLocation.address">
              <span class="label">地址:</span>
              <span class="value">{{ selectedLocation.address }}</span>
            </div>
          </div>
        </div>
      </div>
      <template #footer>
        <el-button @click="mapDialogVisible = false">取消</el-button>
        <el-button 
          type="primary" 
          @click="confirmLocation" 
          :disabled="!selectedLocation"
        >
          确定
        </el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
/* eslint-disable */
/* global BMap, BMAP_ANCHOR_TOP_LEFT, BMAP_NAVIGATION_CONTROL_SMALL, BMAP_ANCHOR_BOTTOM_LEFT, BMAP_STATUS_SUCCESS */

import { ref, nextTick, onBeforeUnmount, onMounted, watch } from 'vue'
import { ElMessage } from 'element-plus'
import { Location, Aim, Loading, Search } from '@element-plus/icons-vue'
import request from '@/utils/request'

// 百度地图API密钥 - 请替换成您自己的AK
const BAIDU_MAP_AK = 'nFnPIgtDZWDFiV1V4G8bZZ8AAMp5xAmb'

// 表单数据
const form = ref({
  checkinType: 'mixed', // mixed/face/location
  timeRange: [],
  location: null, // { longitude, latitude, address? }
  radius: 100 // 打卡范围(米)
})

// 地图相关状态
const mapDialogVisible = ref(false)
const selectedLocation = ref(null)
const locating = ref(false)
const mapLoading = ref(true)
const searchQuery = ref('')
const isMapApiLoaded = ref(false)
const mapInitialized = ref(false)

let map = null
let marker = null
let circle = null
let geocoder = null
let localSearch = null

// 安全DOM操作辅助函数
const safeDOMOperation = async (selector, operation) => {
  await nextTick()
  const el = document.querySelector(selector)
  if (el && el.offsetParent) {
    return operation(el)
  }
  throw new Error(`元素 ${selector} 不可用或未渲染`)
}

// 组件卸载前清理地图
onBeforeUnmount(() => {
  cleanMap()
  delete window.BMap
  delete window.initBaiduMap
})

// 监视对话框状态
watch(mapDialogVisible, (visible) => {
  if (!visible) {
    cleanMap()
  }
})

// 加载百度地图API
const loadBaiduMap = () => {
  return new Promise((resolve, reject) => {
    if (typeof BMap !== 'undefined') {
      isMapApiLoaded.value = true
      resolve()
      return
    }

    // 防止重复加载
    if (window._baiduMapLoadingPromise) {
      return window._baiduMapLoadingPromise
    }

    window._baiduMapLoadingPromise = new Promise((res, rej) => {
      const script = document.createElement('script')
      script.src = `https://api.map.baidu.com/api?v=3.0&ak=${BAIDU_MAP_AK}&callback=initBaiduMap`
      
      // 超时处理
      const timeout = setTimeout(() => {
        rej(new Error('百度地图加载超时'))
        document.head.removeChild(script)
        delete window._baiduMapLoadingPromise
      }, 10000)
      
      script.onload = () => {
        clearTimeout(timeout)
        window.initBaiduMap = () => {
          isMapApiLoaded.value = true
          res()
        }
      }
      
      script.onerror = () => {
        clearTimeout(timeout)
        rej(new Error('百度地图加载失败'))
        delete window._baiduMapLoadingPromise
      }
      
      document.head.appendChild(script)
    }).then(resolve).catch(reject)
  })
}

// 初始化地图
const initMap = async () => {
  try {
    await safeDOMOperation('#baidu-map-container', (mapContainer) => {
      mapContainer.style.height = '100%'
      
      if (!window.BMap) {
        throw new Error('百度地图API未正确加载')
      }
      
      // 创建地图实例
      map = new BMap.Map('baidu-map-container', {
        enableMapClick: true,
        minZoom: 10,
        maxZoom: 19
      })
      
      // 设置默认中心点
      const defaultPoint = form.value.location 
        ? new BMap.Point(form.value.location.longitude, form.value.location.latitude)
        : new BMap.Point(116.404, 39.915)
      
      map.centerAndZoom(defaultPoint, form.value.location ? 17 : 15)
      
      // 启用控件
      map.enableScrollWheelZoom(true)
      map.enableDragging()
      map.enableDoubleClickZoom()
      
      // 添加控件
      map.addControl(new BMap.NavigationControl({
        anchor: BMAP_ANCHOR_TOP_LEFT,
        type: BMAP_NAVIGATION_CONTROL_SMALL
      }))
      map.addControl(new BMap.ScaleControl({
        anchor: BMAP_ANCHOR_BOTTOM_LEFT
      }))
      
      // 设置地图样式
      map.setMapStyleV2({ 
        styleJson: [
          {
            "featureType": "water",
            "elementType": "all",
            "stylers": { "color": "#d1d1d1" }
          },
          {
            "featureType": "land",
            "elementType": "all",
            "stylers": { "color": "#f3f3f3" }
          },
          {
            "featureType": "road",
            "elementType": "all",
            "stylers": { "color": "#ffffff" }
          },
          {
            "featureType": "poi",
            "elementType": "all",
            "stylers": { "visibility": "off" }
          }
        ]
      })
      
      // 初始化地理编码器
      geocoder = new BMap.Geocoder()
      
      // 初始化本地搜索
      localSearch = new BMap.LocalSearch(map, {
        renderOptions: { 
          map: map, 
          panel: null,
          autoViewport: true,
          selectFirstResult: true
        },
        onSearchComplete: handleSearchComplete
      })
      
      // 添加点击事件
      map.addEventListener('click', handleMapClick)
      
      // 如果有已选位置，显示标记
      if (form.value.location) {
        updateSelectedLocation(
          form.value.location.longitude,
          form.value.location.latitude
        )
      }

      mapLoading.value = false
      mapInitialized.value = true
    })
  } catch (error) {
    console.error('地图初始化失败:', error)
    ElMessage.error('地图初始化失败，请刷新重试')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索完成处理
const handleSearchComplete = (results) => {
  if (localSearch.getStatus() !== BMAP_STATUS_SUCCESS) {
    ElMessage.warning('未找到搜索结果')
    return
  }
  
  if (results.getNumPois() > 0) {
    const firstResult = results.getPoi(0)
    updateSelectedLocation(firstResult.point.lng, firstResult.point.lat)
    ElMessage.success(`已定位到: ${firstResult.title}`)
  }
}

// 地图点击处理
const handleMapClick = async (e) => {
  try {
    await updateSelectedLocation(e.point.lng, e.point.lat)
  } catch (error) {
    console.error('位置选择失败:', error)
    ElMessage.error('位置选择失败')
  }
}

// 更新选中位置
const updateSelectedLocation = async (lng, lat) => {
  try {
    const point = new BMap.Point(lng, lat)
    
    // 清除旧覆盖物
    if (marker) map.removeOverlay(marker)
    if (circle) map.removeOverlay(circle)
    
    // 添加新标记
    marker = new BMap.Marker(point, { 
      enableDragging: true,
      raiseOnDrag: true
    })
    marker.addEventListener('dragend', (e) => {
      updateSelectedLocation(e.point.lng, e.point.lat)
    })
    map.addOverlay(marker)
    
    // 添加范围圈
    circle = new BMap.Circle(point, form.value.radius, {
      strokeColor: "#1890ff",
      strokeWeight: 2,
      strokeOpacity: 0.8,
      fillColor: "#1890ff",
      fillOpacity: 0.2
    })
    map.addOverlay(circle)
    
    // 获取地址信息
    const address = await new Promise((resolve) => {
      geocoder.getLocation(point, (result) => {
        resolve(result ? formatAddress(result.addressComponents) : '未知地址')
      })
    })
    
    selectedLocation.value = {
      longitude: lng,
      latitude: lat,
      address: address
    }
    
    // 居中显示
    map.panTo(point)
    
  } catch (error) {
    console.error('更新位置失败:', error)
    throw error
  }
}

// 格式化地址
const formatAddress = (addComp) => {
  const { province, city, district, street, streetNumber } = addComp
  return `${province || ''}${city || ''}${district || ''}${street || ''}${streetNumber || ''}`
}

// 清理地图资源
const cleanMap = () => {
  if (map) {
    try {
      map.clearOverlays()
      map.destroy()
    } catch (e) {
      console.error('清理地图时出错:', e)
    }
  }
  marker = null
  circle = null
  localSearch = null
  geocoder = null
  selectedLocation.value = null
  mapLoading.value = true
  searchQuery.value = ''
  mapInitialized.value = false
}

// 打开地图对话框
const openMapDialog = async () => {
  try {
    cleanMap() // 先清理旧实例
    mapDialogVisible.value = true
    mapLoading.value = true
    ElMessage.error('执行到这里了')
    await loadBaiduMap()
    await initMap()
    
  } catch (error) {
    console.error('打开地图失败:', error)
    ElMessage.error(error.message || '地图加载失败')
    mapDialogVisible.value = false
    mapLoading.value = false
  }
}

// 搜索处理
const handleSearch = () => {
  if (!searchQuery.value.trim()) {
    ElMessage.warning('请输入搜索关键词')
    return
  }
  
  if (!localSearch) {
    ElMessage.error('搜索功能未初始化')
    return
  }
  
  localSearch.search(searchQuery.value)
}

// 居中显示已选位置
const centerToSelected = () => {
  if (selectedLocation.value && map) {
    const point = new BMap.Point(
      selectedLocation.value.longitude,
      selectedLocation.value.latitude
    )
    map.panTo(point)
    map.setZoom(17)
  }
}

// 定位当前位置
const locateCurrentPosition = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        await updateSelectedLocation(lng, lat)
        ElMessage.success('定位成功')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// 获取当前位置(直接设置表单)
const getCurrentLocation = () => {
  if (!navigator.geolocation) {
    ElMessage.warning('您的浏览器不支持地理位置功能')
    return
  }
  
  locating.value = true
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      try {
        const { lat, lng } = await convertWGS84ToBD09(
          position.coords.latitude,
          position.coords.longitude
        )
        
        const address = await getAddressByCoordinate(lng, lat)
        
        form.value.location = {
          longitude: lng,
          latitude: lat,
          address: address
        }
        
        ElMessage.success('当前位置已设置')
      } catch (error) {
        console.error('坐标转换失败:', error)
        ElMessage.error('定位失败')
      } finally {
        locating.value = false
      }
    },
    (error) => {
      locating.value = false
      console.error('获取位置失败:', error)
      ElMessage.error(`获取位置失败: ${error.message}`)
    },
    {
      enableHighAccuracy: true,
      timeout: 10000
    }
  )
}

// WGS84坐标转百度坐标(BD09)
const convertWGS84ToBD09 = async (lat, lng) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      // 简化的坐标转换算法
      resolve({
        lat: lat + 0.0060,
        lng: lng + 0.0065
      })
    }, 300)
  })
}

// 根据坐标获取地址
const getAddressByCoordinate = (lng, lat) => {
  return new Promise((resolve) => {
    if (!geocoder) geocoder = new BMap.Geocoder()
    
    const point = new BMap.Point(lng, lat)
    geocoder.getLocation(point, (result) => {
      if (result) {
        const addComp = result.addressComponents
        resolve(`${addComp.province}${addComp.city}${addComp.district}${addComp.street}${addComp.streetNumber}`)
      } else {
        resolve(null)
      }
    })
  })
}

// 确认位置选择
const confirmLocation = () => {
  if (selectedLocation.value) {
    form.value.location = { ...selectedLocation.value }
    mapDialogVisible.value = false
    ElMessage.success('位置选择成功')
  }
}

// 提交表单
const submitForm = () => {
  if (!form.value.timeRange || form.value.timeRange.length !== 2) {
    ElMessage.error('请选择打卡时间范围')
    return
  }

  if (form.value.checkinType === 'location' && !form.value.location) {
    ElMessage.error('请选择打卡位置')
    return
  }

  const payload = {
    checkinType: form.value.checkinType,
    startTime: form.value.timeRange[0],
    endTime: form.value.timeRange[1],
    ...(form.value.checkinType === 'location' ? {
      location: form.value.location,
      radius: form.value.radius
    } : {})
  }

  request({
    method: 'post',
    url: '/releasecheckin',
    data: payload
  }).then((response) => {
    if (response.code === 0) {
      ElMessage.success('打卡发布成功')
      resetForm()
    } else {
      ElMessage.error(response.message || '打卡发布失败')
    }
  }).catch((error) => {
    console.error(error)
    ElMessage.error('打卡发布失败')
  })
}

// 重置表单
const resetForm = () => {
  form.value = {
    checkinType: 'mixed',
    timeRange: [],
    location: null,
    radius: 100
  }
  ElMessage.success('表单已重置')
}
</script>

<style scoped>
.publish-checkin-container {
  max-width: 800px;
  margin: 20px auto;
  padding: 20px;
}

.form-card {
  border-radius: 8px;
}

.card-header {
  font-size: 18px;
  font-weight: bold;
}

.location-info {
  margin-top: 10px;
  padding: 10px;
  background-color: #f5f7fa;
  border-radius: 4px;
  font-size: 14px;
}

.location-info p {
  margin: 5px 0;
}

.map-dialog-content {
  display: flex;
  height: 60vh;
  gap: 16px;
}

.map-container {
  flex: 1;
  height: 100%;
  min-height: 400px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  position: relative;
  background-color: #f5f7fa;
}

.map-loading {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8);
  z-index: 10;
  color: #606266;
}

.map-loading .el-icon {
  font-size: 24px;
  margin-bottom: 8px;
  animation: rotating 2s linear infinite;
}

.search-box {
  margin-bottom: 16px;
}

@keyframes rotating {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.map-controls {
  width: 280px;
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.control-buttons {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.selected-info {
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
}

.selected-info h4 {
  margin: 0 0 8px 0;
  color: #303133;
}

.info-item {
  display: flex;
  margin: 8px 0;
  line-height: 1.5;
}

.info-item .label {
  color: #606266;
  min-width: 40px;
  margin-right: 8px;
}

.info-item .value {
  color: #303133;
  word-break: break-all;
}
</style>